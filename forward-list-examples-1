#include <iostream>
#include <iomanip>
#include <list>
#include <algorithm>
#include <iterator>

template <typename T>
void display(const std::list<T>& l) {
	std::cout << "[ ";
	for (const auto &i : l) {
		std::cout << i << " ";
	}
	std::cout << "]";
}
}

class Player_1 {
	friend std::ostream& operator<<(std::ostream& os, const Player_1& rhs);
private:
	std::string name;
	int xp;
	double health;
public:
	Player_1(std::string name = "unknown", int xp = { 1 }, double health = { 1 }) //overloaded constructor
		: name{ name }, xp{ xp }, health{ health } {}
	Player_1(const Player_1& p) : name{ p.name }, xp{ p.xp }, health{ p.health } {} //copy constructor
	~Player_1() = default;
	bool operator > (const Player_1& p) { return this->xp > p.xp; }
	bool operator == (const Player_1& rhs) const { return (this->name == rhs.name && this->xp == rhs.xp); }
	int get_xp() { return this->xp; }
	std::string get_name() { return this->name; }
	double get_health() { return this->health; }
	void set_name(std::string name) { this->name = name; }
	void set_xp(int xp) { this->xp = xp; }
	void set_health(double health) { this->health = health; }
};

std::ostream& operator<< (std::ostream& os, const Player_1& rhs) {
	os << std::setw(15) << std::left << "[Player: " << std::setw(15) << std::right << rhs.name << ", " << rhs.health << ", " << rhs.xp << "]" << std::endl;
	return os;
};

int main() {
std::cout << std::setw(33) << std::setfill('-') << std::left << "\n" << std::endl;
	std::list <Player_1> list_0{
		{"Jenny", 18,10},
		{"Elizabeth",19,11},
		{"Gabriel",20,12}
	};
	display(list_0);
	std::string name;
	int xp{};
	double health{};
	std::cout << "\nEnter the name of the new account: ";
	getline(std::cin, name);
	std::cout << "Enter XP: ";
	std::cin >> xp;
	std::cout << "Enter health: ";
	std::cin >> health;
	list_0.emplace_back(name, xp, health);
	display(list_0);
	auto it = std::find(list_0.begin(), list_0.end(), Player_1{ "Elizabeth",19,21 });
	if (it != list_0.end())
		list_0.emplace(it, "Gandalf", 303,98);
	display(list_0);
	list_0.push_front(Player_1{ "Frodo", 25,98 });
	display(list_0);
	list_0.push_back(Player_1{ "Sam",37,89 });
	display(list_0);
return 0;
}
