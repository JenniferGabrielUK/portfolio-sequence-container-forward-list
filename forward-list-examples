// portfolio-sequence-container-forward-list.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <list>
#include <algorithm>
#include <iterator> // for std::advance

class Person {
    friend std::ostream& operator<< (std::ostream& os, const Person& p);
    std::string name;
    int age;
public:
    Person() : name{ "Unknown" }, age{ 0 } {}
    Person(std::string name, int age)
        :name{ name }, age{ age } {}
    bool operator < (const Person& rhs) const { return this->age < rhs.age; }
    bool operator == (const Person& rhs) const { return (this->name == rhs.name && this->age == rhs.age); }
};

std::ostream& operator<< (std::ostream& os, const Person& p) {
    os << p.name << " : " << p.age << ",";
    return os;
}

template <typename T> 
void display(const std::list <T>& l) {
    std::cout << "[";
    for (const auto& elem : l) {
        std::cout << elem << " ";
    }
    std::cout << "]" << std::endl;
}

void test1() {
    std::cout << "\nTest1======================" << std::endl;
    std::list <int> l1{ 1, 2, 3, 4, 5 };
    display(l1);
    std::list <std::string> l2;
    l2.push_back("Jenny");
    l2.push_front("Gabriel");
    display(l2);
    std::list<int> l3;
    l3 = { 1,2,3,4,5,6,7,8,9,10 };
    display(l3);
    std::list<int> l4(10, 100);
    display(l4);
    std::list<int> l5(100, 10);
    display(l5);
    std::list<std::string> l6;
    l6.push_front("Gabriel");
    l6.push_front("Jenny");
    display(l6);
    std::list<double> l7{ 1.1,1.2,1.3,1.4,1.5 };
    display(l7);
    std::list<double> l8;
    l8 = l7;
    display(l8);
}

void test2() {
    std::cout << "\nTest2 =======================" << std::endl;
    std::list<int> l {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    display(l);
    std::cout << "Size: " << l.size() << std::endl;
    std::cout << "Front: " << l.front() << std::endl;
    std::cout << "Back: " << l.back() << std::endl;
    l.clear();
    display(l);
    std::cout << "Size: " << l.size() << std::endl;
}

void test3() {
    std::cout << "\nTest3========================" << std::endl;
    std::list<int> l1{ 1,2,3,4,5,6,7,8,9,10 };
    std::list<double> l2{ 1.1,1.2,1.3,1.4,1.5 };
    display(l1);
    l1.resize(5);
    display(l1);
    l1.resize(10);
    display(l1);
    l1 = { 1,2,3,4,5,6,7,8,9,10 };
    display(l1);
    l2.resize(5);
    display(l2);
    l2.resize(10);
    display(l2);
    std::list<Person> accounts{};
    accounts.resize(5);
    display(accounts);
    accounts.resize(10);
    display(accounts);
}

void test4() {
    std::cout << "\nTest4========================" << std::endl;
    std::list<int> l1{ 1,2,3,4,5,6,7,8,9,10 };
    display(l1);
    auto it = std::find(l1.begin(), l1.end(), 5);
    if (it != l1.end()) {
        l1.insert(it, 100);
    }
    display(l1);
    std::list<double> l2{ 1.1,1.2,1.3,1.4,1.5 };
    auto it2 = std::find(l2.begin(), l2.end(), 1.3);
    if (it2 != l2.end()) {
        l2.insert(it2, 2.3);
    }
    display(l2);
    std::list<int> l3{ 1000,2000,3000 };
    l1.insert(it, l3.begin(), l3.end());
    display(l1);
    std::list<double> l4{ 1.001, 2.002, 3.003 };
    l2.insert(it2, l4.begin(), l4.end());
    display(l2);
    std::advance(it, -4); //point to the 100
    std::cout << *it << std::endl;
    l1.erase(it); //remove the 100 - making iterator invalid
    display(l1);
    std::advance(it2, -2); //point to the 2.002
    std::cout << *it2 << std::endl;
    l2.erase(it2);
    display(l2);
}

void test5() {
    std::cout << "\nTest5========================" << std::endl;
    std::list <Person> accounts{
        {"Jenny", 18},
        {"Elizabeth",19},
        {"Gabriel",20}
    };
    display(accounts);
    std::string name;
    int age{};
    std::cout << "\nEnter the name of the new account: ";
    getline(std::cin, name);
    std::cout << "Enter age: ";
    std::cin >> age;
    accounts.emplace_back(name, age);
    display(accounts);
    auto it = std::find(accounts.begin(), accounts.end(), Person{ "Elizabeth",19 });
    if (it != accounts.end())
        accounts.emplace(it, "Gandalf", 303);
    display(accounts);
    accounts.push_front(Person{ "Frodo", 25 });
    display(accounts);
    accounts.push_back(Person{ "Sam",37 });
    display(accounts);
}

int main()
{
    test1();
    test2();
    test3();
    test4();
    test5();
    return 0;
}
