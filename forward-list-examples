// portfolio-sequence-container-forward-list.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <list>
#include <algorithm>
#include <iterator> // for std::advance

class Person {
    friend std::ostream& operator<< (std::ostream& os, const Person& p);
    std::string name;
    int age;
public:
    Person() : name{ "Unknown" }, age{ 0 } {}
    Person(std::string name, int age)
        :name{ name }, age{ age } {}
    bool operator < (const Person& rhs) const { return this->age < rhs.age; }
    bool operator == (const Person& rhs) const { return (this->name == rhs.name && this->age == rhs.age); }
};

std::ostream& operator<< (std::ostream& os, const Person& p) {
    os << p.name << " : " << p.age;
    return os;
}

template <typename T> 
void display(const std::list <T>& l) {
    std::cout << "[";
    for (const auto& elem : l) {
        std::cout << elem << " ";
    }
    std::cout << "]" << std::endl;
}

void test1() {
    std::cout << "\nTest1======================" << std::endl;
    std::list <int> l1{ 1, 2, 3, 4, 5 };
    display(l1);
    std::list <std::string> l2;
    l2.push_back("Jenny");
    l2.push_front("Gabriel");
    display(l2);
    std::list<int> l3;
    l3 = { 1,2,3,4,5,6,7,8,9,10 };
    display(l3);
    std::list<int> l4(10, 100);
    display(l4);
    std::list<int> l5(100, 10);
    display(l5);
    std::list<std::string> l6;
    l6.push_front("Gabriel");
    l6.push_front("Jenny");
    display(l6);
    std::list<double> l7{ 1.1,1.2,1.3,1.4,1.5 };
    display(l7);
    std::list<double> l8;
    l8 = l7;
    display(l8);
}

int main()
{
    test1();
    return 0;
}
